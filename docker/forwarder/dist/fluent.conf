# Global Parameters
#========================
  <system>
    suppress_config_dump true
  </system>

# Internal Pipeline
#========================

# Tail - raw_data/listened.json.
    <source>
      @type tail
      path /var/log/data/raw_data/listener/listened.json
      @label @processing-data
      tag listener
      <parse>
        @type json
      </parse>
    </source>

# Tail - raw_data/eve.json.
    <source>
      @type tail
      path /var/log/data/raw_data/ids/eve.json
      @label @processing-data
      tag suricata
      <parse>
        @type json
      </parse>
    </source>
  
# Creating parted_data
  <label @processing-data>
    #====================
      # Generating listener partfiles.
        <match listener>
          @type file
          path /var/log/data/parted_data/listener/part-%Y-%m-%d-%H-%M
          add_path_suffix true
          path_suffix ".json"
          append true
          <format>
            @type json
          </format>
          <buffer>
            timekey 1m
            timekey_use_utc true
            timekey_wait 0s
            chunk_limit_size 200m
          </buffer>
        </match>

      # Generating suricata partfiles
        <match suricata>
          @type file
          path /var/log/data/parted_data/ids/part-%Y-%m-%d-%H-%M
          add_path_suffix true
          path_suffix ".json"
          append true
          <format>
            @type json
          </format>
          <buffer>
            timekey 1m
            timekey_use_utc true
            timekey_wait 0s
            chunk_limit_size 200m
          </buffer>
        </match>
  </label>

# External Pipeline
#========================
  # Alert Log File.
    <source>
      @type tail
      path /var/log/data/processed_data/xdr_alert.json
      @label @alert-data
      tag xdr_alert
      <parse>
        @type json
      </parse>
    </source>

    <source>
      @type tail
      path /var/log/data/processed_data/xdr_incident.json
      @label @incident-data
      tag xdr_incident
      <parse>
        @type json
      </parse>
    </source>

    <source>
      @type tail
      path /var/log/data/processed_data/xdr_event.json
      @label @event-data
      tag xdr_event
      <parse>
        @type json
      </parse>
    </source>
    
    <source>
      @type tail
      path /var/log/data/processed_data/network_map.json
      @label @network-map-data
      tag aws_map
      <parse>
        @type json
      </parse>
    </source>

    <source>
      @type tail
      path /var/log/data/processed_data/asset/asset.json
      @label @asset-data
      tag asset
      <parse>
        @type json
      </parse>
    </source>

  <label @alert-data>
    # Filters
    #======================
      # Mapping Geoip Data (In two stages City then ASN)
        <filter xdr_alert>
          @type geoip
          geoip_lookup_keys  attacker_ip
          geoip2_database /geo-data/GeoLite2-City.mmdb
          skip_adding_null_record  true
          <record>
            geoip_city              ${city.names.en["attacker_ip"]}
            geoip_latitude          ${location.latitude["attacker_ip"]}
            geoip_longitude         ${location.longitude["attacker_ip"]}
            geoip_country_code      ${country.iso_code["attacker_ip"]}
            geoip_country_name      ${country.names.en["attacker_ip"]}
            geoip_postal_code       ${postal.code["attacker_ip"]}
            geoip_region_code       ${subdivisions.0.iso_code["attacker_ip"]}
            geoip_region_name       ${subdivisions.0.names.en["attacker_ip"]}
            geoip_anon_proxy        ${is_anonymous_proxy["attacker_ip"]}
            geoip_location_accuracy ${accuracy_radius["attacker_ip"]}
            # Kibana formatted fields.
            # Location as properties
            # ex. {"lat" => 37.4192008972168, "lon" => -122.05740356445312 }
            geoip_location_properties  '{ "lat" : ${location.latitude["attacker_ip"]}, "lon" : ${location.longitude["attacker_ip"]} }'
            # Location as a string
            # ex. "37.4192008972168,-122.05740356445312"
            geoip_location_string      ${location.latitude["attacker_ip"]},${location.longitude["attacker_ip"]}
            # Location as array
            # ex. [-122.05740356445312, 37.4192008972168]
            geoip_location_array       '[${location.longitude["attacker_ip"]},${location.latitude["attacker_ip"]}]'
          </record>
        </filter>

        <filter xdr_alert>
          @type geoip
          geoip_lookup_keys  attacker_ip
          geoip2_database /geo-data/GeoLite2-ASN.mmdb
          skip_adding_null_record  true
          <record>
            geoip_asn_number        ${autonomous_system_number["attacker_ip"]}
            geoip_asn_name          ${autonomous_system_organization["attacker_ip"]}
          </record>
        </filter>

      # Mapping source IP reputations.
        <filter xdr_alert>
          @type dict_map
          default_value unknown
          key_name attacker_ip
          destination_key_name ip_rep
          dictionary_path /etc/listbot/iprep.json
        </filter>
  
      # Field de dotter.
      <filter xdr_alert>
        @type dedot
        de_dot true
        de_dot_separator _
      </filter>  

      # Generating unique hash ids for our data.
        <filter xdr_alert>
          @type opensearch_genid
          hash_id_key _hash
        </filter>

      # Adding the log class and sender to identify the logs on the router side.
        <filter xdr_alert>
          @type record_modifier
          <record>
            log_tag "xdr-nids-alert-#{ENV['COMPANY_INDEX']}"
            platform "#{ENV['OPERATING_ENV']}"
            client_geoip_city "#{ENV['CLIENT_CITY']}"
            client_geoip_latitude "#{ENV['CLIENT_LATITUDE']}"
            client_geoip_longitude "#{ENV['CLIENT_LONGITUDE']}"
            client_geoip_country_code "#{ENV['CLIENT_COUNTRY_CODE']}"
            client_geoip_country_name "#{ENV['CLIENT_COUNTRY_NAME']}"
          </record>
        </filter>
    # Outputs
    #=======================
      # Sending alerts to log aggregator.
        <match **>
          @type forward
          <server>
            host "#{ENV['AGGREGATOR_IP']}"
            port "#{ENV['AGGREGATOR_PORT']}"
          </server>
          compress gzip
          heartbeat_type none
          <buffer>
            @type memory
            flush_thread_count 5
            flush_interval 5s
            chunk_limit_size 256MB
          </buffer>
        </match>
  </label>

  <label @incident-data>
    # Filters
    #======================
      # Mapping Geoip Data (In two stages City then ASN)
        <filter xdr_incident>
          @type geoip
          geoip_lookup_keys  attacker_ip
          geoip2_database /geo-data/GeoLite2-City.mmdb
          skip_adding_null_record  true
          <record>
            geoip_city              ${city.names.en["attacker_ip"]}
            geoip_latitude          ${location.latitude["attacker_ip"]}
            geoip_longitude         ${location.longitude["attacker_ip"]}
            geoip_country_code      ${country.iso_code["attacker_ip"]}
            geoip_country_name      ${country.names.en["attacker_ip"]}
            geoip_postal_code       ${postal.code["attacker_ip"]}
            geoip_region_code       ${subdivisions.0.iso_code["attacker_ip"]}
            geoip_region_name       ${subdivisions.0.names.en["attacker_ip"]}
            geoip_anon_proxy        ${is_anonymous_proxy["attacker_ip"]}
            geoip_location_accuracy ${accuracy_radius["attacker_ip"]}
            # Kibana formatted fields.
            # Location as properties
            # ex. {"lat" => 37.4192008972168, "lon" => -122.05740356445312 }
            geoip_location_properties  '{ "lat" : ${location.latitude["attacker_ip"]}, "lon" : ${location.longitude["attacker_ip"]} }'
            # Location as a string
            # ex. "37.4192008972168,-122.05740356445312"
            geoip_location_string      ${location.latitude["attacker_ip"]},${location.longitude["attacker_ip"]}
            # Location as array
            # ex. [-122.05740356445312, 37.4192008972168]
            geoip_location_array       '[${location.longitude["attacker_ip"]},${location.latitude["attacker_ip"]}]'
          </record>
        </filter>

        <filter xdr_incident>
          @type geoip
          geoip_lookup_keys  attacker_ip
          geoip2_database /geo-data/GeoLite2-ASN.mmdb
          skip_adding_null_record  true
          <record>
            geoip_asn_number        ${autonomous_system_number["attacker_ip"]}
            geoip_asn_name          ${autonomous_system_organization["attacker_ip"]}
          </record>
        </filter>

      # Mapping source IP reputations.
        <filter xdr_incident>
          @type dict_map
          default_value unknown
          key_name attacker_ip
          destination_key_name ip_rep
          dictionary_path /etc/listbot/iprep.json
        </filter>
  
      # Field de dotter.
      <filter xdr_incident>
        @type dedot
        de_dot true
        de_dot_separator _
      </filter>  

      # Generating unique hash ids for our data.
        <filter xdr_incident>
          @type opensearch_genid
          hash_id_key _hash
        </filter>

      # Adding the log class and sender to identify the logs on the router side.
        <filter xdr_incident>
          @type record_modifier
          <record>
            log_tag "xdr-nids-incident-#{ENV['COMPANY_INDEX']}"
            platform "#{ENV['OPERATING_ENV']}"
            log_tag "xdr-nids-alert-#{ENV['COMPANY_INDEX']}"
            platform "#{ENV['OPERATING_ENV']}"
            client_geoip_city "#{ENV['CLIENT_CITY']}"
            client_geoip_latitude "#{ENV['CLIENT_LATITUDE']}"
            client_geoip_longitude "#{ENV['CLIENT_LONGITUDE']}"
            client_geoip_country_code "#{ENV['CLIENT_COUNTRY_CODE']}"
            client_geoip_country_name "#{ENV['CLIENT_COUNTRY_NAME']}"
          </record>
        </filter>
    # Outputs
    #=======================
      # Sending alerts to log aggregator.
        <match **>
          @type forward
          <server>
            host "#{ENV['AGGREGATOR_IP']}"
            port "#{ENV['AGGREGATOR_PORT']}"
          </server>
          compress gzip
          heartbeat_type none
          <buffer>
            @type memory
            flush_thread_count 5
            flush_interval 5s
            chunk_limit_size 256MB
          </buffer>
        </match>
  </label>

  <label @event-data>
    # Filters
    #======================
      # Mapping Geoip Data (In two stages City then ASN)
        <filter xdr_event>
          @type geoip
          geoip_lookup_keys  attacker_ip
          geoip2_database /geo-data/GeoLite2-City.mmdb
          skip_adding_null_record  true
          <record>
            geoip_city              ${city.names.en["attacker_ip"]}
            geoip_latitude          ${location.latitude["attacker_ip"]}
            geoip_longitude         ${location.longitude["attacker_ip"]}
            geoip_country_code      ${country.iso_code["attacker_ip"]}
            geoip_country_name      ${country.names.en["attacker_ip"]}
            geoip_postal_code       ${postal.code["attacker_ip"]}
            geoip_region_code       ${subdivisions.0.iso_code["attacker_ip"]}
            geoip_region_name       ${subdivisions.0.names.en["attacker_ip"]}
            geoip_anon_proxy        ${is_anonymous_proxy["attacker_ip"]}
            geoip_location_accuracy ${accuracy_radius["attacker_ip"]}
            # Kibana formatted fields.
            # Location as properties
            # eg. {"lat" => 37.4192008972168, "lon" => -122.05740356445312 }
            geoip_location_properties  '{ "lat" : ${location.latitude["attacker_ip"]}, "lon" : ${location.longitude["attacker_ip"]} }'
            # Location as a string
            # eg. "37.4192008972168,-122.05740356445312"
            geoip_location_string      ${location.latitude["attacker_ip"]},${location.longitude["attacker_ip"]}
            # Location as array
            # eg. [-122.05740356445312, 37.4192008972168]
            geoip_location_array       '[${location.longitude["attacker_ip"]},${location.latitude["attacker_ip"]}]'
          </record>
        </filter>

        <filter xdr_event>
          @type geoip
          geoip_lookup_keys  attacker_ip
          geoip2_database /geo-data/GeoLite2-ASN.mmdb
          skip_adding_null_record  true
          <record>
            geoip_asn_number        ${autonomous_system_number["attacker_ip"]}
            geoip_asn_name          ${autonomous_system_organization["attacker_ip"]}
          </record>
        </filter>

      # Mapping source IP reputations.
        <filter xdr_event>
          @type dict_map
          default_value unknown
          key_name attacker_ip
          destination_key_name ip_rep
          dictionary_path /etc/listbot/iprep.json
        </filter>
  
      # Field de dotter.
      <filter xdr_event>
        @type dedot
        de_dot true
        de_dot_separator _
      </filter>  

      # Generating unique hash ids for our data.
        <filter xdr_event>
          @type opensearch_genid
          hash_id_key _hash
        </filter>

      # Adding the log class and sender to identify the logs on the router side.
        <filter xdr_event>
          @type record_modifier
          <record>
            log_tag "xdr-nids-event-#{ENV['COMPANY_INDEX']}"
            platform "#{ENV['OPERATING_ENV']}"
            client_geoip_city "#{ENV['CLIENT_CITY']}"
            client_geoip_latitude "#{ENV['CLIENT_LATITUDE']}"
            client_geoip_longitude "#{ENV['CLIENT_LONGITUDE']}"
            client_geoip_country_code "#{ENV['CLIENT_COUNTRY_CODE']}"
            client_geoip_country_name "#{ENV['CLIENT_COUNTRY_NAME']}"
          </record>
        </filter>
    # Outputs
    #=======================
      # Sending alerts to log aggregator.
        <match **>
          @type forward
          <server>
            host "#{ENV['AGGREGATOR_IP']}"
            port "#{ENV['AGGREGATOR_PORT']}"
          </server>
          compress gzip
          heartbeat_type none
          <buffer>
            @type memory
            flush_thread_count 5
            flush_interval 5s
            chunk_limit_size 256MB
          </buffer>
        </match>
  </label>

  <label @network-map-data>
      <filter **>
        @type record_modifier
        <record>
          log_tag "xdr-nids-nmap-#{ENV['COMPANY_INDEX']}"
        </record>
      </filter>

    # Outputs
    #=======================
      # Sending alerts to log aggregator.
      <match **>
        @type forward
        <server>
          host "#{ENV['AGGREGATOR_IP']}"
          port "#{ENV['AGGREGATOR_PORT']}"
        </server>
        compress gzip
        heartbeat_type none
        <buffer>
          @type memory
          flush_thread_count 5
          flush_interval 5s
          chunk_limit_size 256MB
        </buffer>
      </match>
  </label>

  <label @asset-data>
    <filter *>
      @type record_modifier
      <record>
        log_tag "xdr-nids-assets-#{ENV['COMPANY_INDEX']}"
        platform "#{ENV['OPERATING_ENV']}"
      </record>
    </filter>	
    <match *>
      @type forward
      <server>
        host "#{ENV['AGGREGATOR_IP']}"
        port "#{ENV['AGGREGATOR_PORT']}"
      </server>
      compress gzip
      heartbeat_type none
      <buffer>
        @type memory
        flush_thread_count 5
        flush_interval 5s
        chunk_limit_size 256MB
      </buffer>
    </match>
  </label>